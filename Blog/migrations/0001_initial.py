# Generated by Django 4.2.1 on 2023-06-11 21:45

import ckeditor_uploader.fields
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessLog',
            fields=[
                ('access_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(blank=True, null=True, verbose_name='用户ID')),
                ('user_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='用户名')),
                ('post_id', models.IntegerField(blank=True, null=True, verbose_name='访问文章ID')),
                ('post_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='访问文章标题')),
                ('ip_address', models.CharField(max_length=100, verbose_name='IP地址')),
                ('platform_name', models.CharField(max_length=50, null=True, verbose_name='操作系统名称')),
                ('platform_version', models.CharField(max_length=50, null=True, verbose_name='操作系统版本')),
                ('browser_family', models.CharField(max_length=50, null=True, verbose_name='浏览器品牌')),
                ('browser_version', models.CharField(max_length=50, null=True, verbose_name='浏览器版本')),
                ('referer', models.TextField(blank=True, null=True, verbose_name='来源')),
                ('request_url', models.TextField(blank=True, null=True, verbose_name='请求地址')),
                ('http_method', models.CharField(blank=True, max_length=10, null=True, verbose_name='HTTP 请求方法')),
                ('user_agent_string', models.TextField(blank=True, null=True, verbose_name='用户代理字符串')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name_plural': '访问日志',
                'db_table': 'access_log',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False, verbose_name='分类ID')),
                ('name', models.CharField(max_length=255, verbose_name='分类名')),
                ('description', models.TextField(blank=True, null=True, verbose_name='分类介绍')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Blog.category', verbose_name='父级分类')),
            ],
            options={
                'verbose_name_plural': '分类',
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False, verbose_name='用户ID')),
                ('username', models.CharField(max_length=50, unique=True, verbose_name='用户名')),
                ('email', models.CharField(max_length=100, unique=True, verbose_name='电子邮件')),
                ('password', models.CharField(max_length=100, verbose_name='密码')),
                ('avatar', models.ImageField(blank=True, max_length=255, null=True, upload_to='', verbose_name='头像链接')),
                ('nickname', models.CharField(max_length=50, verbose_name='昵称')),
                ('gender', models.CharField(choices=[('male', '男'), ('female', '女'), ('secret', '保密')], default='secret', max_length=6, null=True, verbose_name='性别')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('location', models.CharField(blank=True, max_length=100, null=True, verbose_name='位置')),
                ('introduction', models.TextField(blank=True, null=True, verbose_name='个人介绍')),
                ('website', models.CharField(blank=True, max_length=255, null=True, verbose_name='个人网站')),
                ('social_links', models.TextField(blank=True, null=True, verbose_name='社交链接')),
                ('registered_at', models.DateTimeField(auto_now_add=True, verbose_name='注册时间')),
                ('last_login_at', models.DateTimeField(auto_now=True, verbose_name='最后登录时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': '用户',
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('post_id', models.AutoField(primary_key=True, serialize=False, verbose_name='文章ID')),
                ('title', models.CharField(max_length=255, verbose_name='文章标题')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='正文内容')),
                ('image_url', models.CharField(blank=True, max_length=255, null=True, verbose_name='配图链接')),
                ('published_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='发布时间')),
                ('views', models.IntegerField(default=0, verbose_name='阅读量')),
                ('likes', models.IntegerField(default=0, verbose_name='点赞数')),
                ('dislikes', models.IntegerField(default=0, verbose_name='踩数')),
                ('is_public', models.BooleanField(default=True, verbose_name='是否公开')),
                ('status', models.CharField(choices=[('draft', '草稿'), ('published', '已发布'), ('archived', '已归档')], default='published', max_length=9, verbose_name='文章状态')),
                ('meta_keywords', models.TextField(blank=True, null=True, verbose_name='SEO关键词')),
                ('meta_description', models.TextField(blank=True, null=True, verbose_name='SEO描述')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('categories', models.ManyToManyField(related_name='posts', to='Blog.category', verbose_name='分类')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户ID')),
            ],
            options={
                'verbose_name_plural': '文章',
                'db_table': 'post',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=50, verbose_name='用户名')),
                ('reply_to', models.CharField(blank=True, max_length=50, null=True, verbose_name='回复的用户名')),
                ('parent_id', models.IntegerField(blank=True, null=True, verbose_name='父评论ID')),
                ('root_id', models.IntegerField(blank=True, null=True, verbose_name='根评论ID')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='评论内容')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('index', models.IntegerField(blank=True, null=True, verbose_name='楼层')),
                ('likes', models.IntegerField(default=0, verbose_name='点赞数')),
                ('dislikes', models.IntegerField(default=0, verbose_name='踩数')),
                ('status', models.CharField(choices=[('approved', '已审核'), ('rejected', '已拒绝'), ('pending', '待审核')], default='pending', max_length=9, verbose_name='状态')),
                ('is_top', models.BooleanField(verbose_name='是否置顶')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='电子邮件')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Blog.post', verbose_name='评论文章')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name_plural': '评论',
                'db_table': 'comment',
            },
        ),
    ]
